{"ast":null,"code":"import { objectVal, remove, ref, set } from '@angular/fire/database';\nimport { Observable, map, mergeMap, of, from, mergeAll, first } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/database\";\nimport * as i2 from \"./authentication.service\";\nexport var ECCategory = /*#__PURE__*/(() => {\n  (function (ECCategory) {\n    ECCategory[\"ADAPTER\"] = \"Adapter\";\n    ECCategory[\"ADC\"] = \"ADC\";\n    ECCategory[\"CONNECTOR\"] = \"Connector\";\n    ECCategory[\"EEPROM\"] = \"EEPROM\";\n    ECCategory[\"IC\"] = \"IC\";\n    ECCategory[\"MICROCONTROLLER\"] = \"Microcontroller\";\n    ECCategory[\"MISC\"] = \"Misc\";\n    ECCategory[\"MODULE\"] = \"Module\";\n    ECCategory[\"PASSIVE\"] = \"Passive Component\";\n    ECCategory[\"REGULATOR\"] = \"Regulator\";\n    ECCategory[\"REGULATOR_IC\"] = \"Regulator IC\";\n    ECCategory[\"SENSOR\"] = \"Sensor\";\n    ECCategory[\"TRANSISTOR\"] = \"Transistor\";\n  })(ECCategory || (ECCategory = {}));\n\n  return ECCategory;\n})();\nexport let DatabaseService = /*#__PURE__*/(() => {\n  class DatabaseService {\n    constructor(database, authService) {\n      this.database = database;\n      this.authService = authService;\n      console.log('database');\n    }\n\n    getComponents() {\n      return this.authService.userData.pipe(mergeMap(user => {\n        console.log('getComponents-user', user);\n\n        if (user !== null) {\n          return this.getComponentsForUid(user.uid);\n        } else {\n          return of([]);\n        }\n      }));\n    }\n\n    saveComponent(component) {\n      console.log('saveComponent', component);\n      return this.authService.userData.pipe(first(), mergeMap(user => {\n        console.log('saveComponent-user', user);\n\n        if (user !== null) {\n          return this.setComponentForUid(user.uid, component);\n        } else {\n          return of();\n        }\n      }));\n    }\n\n    saveComponents(components) {\n      console.log('saveComponents', components);\n      return this.authService.userData.pipe(first(), mergeMap(user => {\n        console.log('saveComponents2-user', user);\n\n        if (user !== null) {\n          return of(...components).pipe(map(component => this.setComponentForUid(user.uid, component)), mergeAll());\n        } else {\n          return of();\n        }\n      }));\n    }\n\n    deleteComponent(id) {\n      return this.authService.userData.pipe(first(), mergeMap(user => {\n        console.log('deleteComponent-user', user);\n\n        if (user !== null) {\n          return from(remove(this.refFor(user.uid, id)));\n        } else {\n          return of();\n        }\n      })); // set(ref(this.database, 'components/' + id), null);\n    }\n\n    getComponentsForUid(uid) {\n      const doc = ref(this.database, uid + '/components');\n      return objectVal(doc).pipe(map(obj => {\n        console.log('obj', obj);\n\n        if (obj !== null) {\n          return Object.entries(obj).map(([_, value]) => value);\n        } else {\n          return [];\n        }\n      }));\n    }\n\n    refFor(uid, cid) {\n      return ref(this.database, uid + '/components/' + cid);\n    }\n\n    setComponentForUid(uid, component) {\n      return from(set(this.refFor(uid, component.id), component));\n    }\n\n  }\n\n  DatabaseService.ɵfac = function DatabaseService_Factory(t) {\n    return new (t || DatabaseService)(i0.ɵɵinject(i1.Database), i0.ɵɵinject(i2.AuthenticationService));\n  };\n\n  DatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DatabaseService,\n    factory: DatabaseService.ɵfac\n  });\n  return DatabaseService;\n})();","map":null,"metadata":{},"sourceType":"module"}