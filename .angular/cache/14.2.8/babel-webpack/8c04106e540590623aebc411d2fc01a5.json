{"ast":null,"code":"import { authState, signInWithPopup, signInWithRedirect } from '@angular/fire/auth';\nimport { GoogleAuthProvider } from 'firebase/auth';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(auth) {\n      this.auth = auth;\n      this.provider = new GoogleAuthProvider();\n      this.userData = authState(auth);\n    }\n\n    signInWithPopup() {\n      signInWithPopup(this.auth, this.provider).then(result => {\n        console.log('signUpWithPopup-result', result); // This gives you a Google Access Token. You can use it to access the Google API.\n\n        const credential = GoogleAuthProvider.credentialFromResult(result);\n        const token = credential.accessToken; // The signed-in user info.\n\n        const user = result.user; // ...\n      }).catch(error => {\n        console.log('signUpWithPopup-error', error); // Handle Errors here.\n\n        const errorCode = error.code;\n        const errorMessage = error.message; // The email of the user's account used.\n\n        const email = error.customData.email; // The AuthCredential type that was used.\n\n        const credential = GoogleAuthProvider.credentialFromError(error); // ...\n      });\n    }\n\n    signInWithRedirect() {\n      signInWithRedirect(this.auth, this.provider).then(() => {\n        console.log('signUpWithPopup-result'); // This gives you a Google Access Token. You can use it to access the Google API.\n        // The signed-in user info.\n        // ...\n      }).catch(error => {\n        console.log('signUpWithPopup-error', error); // Handle Errors here.\n\n        const errorCode = error.code;\n        const errorMessage = error.message; // The email of the user's account used.\n\n        const email = error.customData.email; // The AuthCredential type that was used.\n\n        const credential = GoogleAuthProvider.credentialFromError(error); // ...\n      });\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.Auth));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}