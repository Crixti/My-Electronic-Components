{"ast":null,"code":"'use strict';\n\nconst sheetJs = require('xlsx');\n\nconst abc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n\nexports.onFileSelection = (file, {\n  showNullProperties = false,\n  hideEmptyRows = true\n} = {}) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.addEventListener('loadend', () => {\n      let binary = '';\n      const bytes = new Uint8Array(reader.result);\n\n      for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n\n      resolve(onLoadEvent(binary, reader, hideEmptyRows, showNullProperties));\n    });\n    reader.readAsArrayBuffer(file);\n  });\n};\n\nconst onLoadEvent = (binary, reader, hideEmptyRows, showNullProperties) => {\n  const parsedXls = {};\n  var workbook = sheetJs.read(binary, {\n    type: 'binary'\n  });\n  const sheetNames = getSheetNames(workbook);\n  sheetNames.forEach(name => {\n    const sheet = workbook.Sheets[name];\n    const desiredCells = getDesiredCells(sheet);\n    const lastColRow = getLastRowCol(desiredCells);\n    const columnsAndHeaders = getColumnsAndHeaders(sheet, desiredCells);\n    const data = getData(lastColRow, columnsAndHeaders.excelColumns, columnsAndHeaders.headers, sheet, showNullProperties);\n\n    if (hideEmptyRows) {\n      const finalData = [];\n      data.forEach(element => {\n        let isEmpty = true;\n        columnsAndHeaders.headers.forEach(header => {\n          if (element[header]) {\n            isEmpty = false;\n          }\n        });\n\n        if (!isEmpty) {\n          finalData.push(element);\n        }\n      });\n      parsedXls[name] = finalData;\n    } else {\n      parsedXls[name] = data;\n    }\n  });\n  return parsedXls;\n};\n\nconst getData = (lastColRow, columns, headers, sheet, showNullProperties) => {\n  const data = [];\n\n  for (let R = 2; R <= lastColRow; R++) {\n    const element = {};\n    headers.forEach((header, index) => {\n      const cellValue = getValue(sheet, columns[index], R);\n\n      if (cellValue) {\n        element[header] = cellValue.w ? cellValue.w : cellValue.v;\n      } else if (showNullProperties) {\n        element[header] = null;\n      }\n    });\n\n    if (Object.keys(element).length > 0) {\n      data.push(element);\n    }\n  }\n\n  return data;\n};\n\nconst getValue = (sheet, column, R) => sheet[`${column}${R}`];\n\nconst getSheetNames = workbook => workbook.SheetNames;\n\nconst getDesiredCells = worksheet => worksheet['!ref'];\n\nconst getLastRowCol = cells => {\n  const rows = cells.split(':');\n  const lastColRow = rows.length > 1 ? rows[1] : rows[0];\n  const lastColLetter = extractLetter(lastColRow);\n  const array = lastColRow.split(lastColLetter);\n  return Number(array[1]);\n};\n\nconst getColumnsAndHeaders = (worksheet, desired_cells) => {\n  const cells = desired_cells.split(':');\n  const lastCell = cells.length > 1 ? cells[1] : cells[0];\n  const lastColLetter = extractLetter(lastCell);\n  let iterator = 0;\n  let accumulator = '';\n  let accumulatorIterator = 0;\n  const headers = [];\n  const excelColumns = [];\n\n  while (true) {\n    const currentCell = `${accumulator}${abc[iterator++]}`;\n    const cellHeader = worksheet[currentCell + 1];\n\n    if (cellHeader) {\n      headers.push(cellHeader.v);\n      excelColumns.push(currentCell);\n    }\n\n    if (lastColLetter == currentCell) {\n      return {\n        headers: headers,\n        excelColumns: excelColumns\n      };\n    }\n\n    if (iterator >= abc.length) {\n      const test = abc[accumulatorIterator++];\n      iterator = 0;\n      accumulator = test;\n    }\n  }\n};\n\nconst extractLetter = str => {\n  const array = str.split(/[0-9]+/);\n  return array[0];\n};","map":null,"metadata":{},"sourceType":"script"}