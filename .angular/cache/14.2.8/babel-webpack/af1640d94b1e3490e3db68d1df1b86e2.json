{"ast":null,"code":"import { objectVal, remove, ref, set } from '@angular/fire/database';\nimport { map, mergeMap, filter } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/database\";\nimport * as i2 from \"./authentication.service\";\nexport var ECCategory = /*#__PURE__*/(() => {\n  (function (ECCategory) {\n    ECCategory[\"ADAPTER\"] = \"Adapter\";\n    ECCategory[\"ADC\"] = \"ADC\";\n    ECCategory[\"CONNECTOR\"] = \"Connector\";\n    ECCategory[\"EEPROM\"] = \"EEPROM\";\n    ECCategory[\"IC\"] = \"IC\";\n    ECCategory[\"MICROCONTROLLER\"] = \"Microcontroller\";\n    ECCategory[\"MISC\"] = \"Misc\";\n    ECCategory[\"MODULE\"] = \"Module\";\n    ECCategory[\"PASSIVE\"] = \"Passive Component\";\n    ECCategory[\"REGULATOR\"] = \"Regulator\";\n    ECCategory[\"REGULATOR_IC\"] = \"Regulator IC\";\n    ECCategory[\"SENSOR\"] = \"Sensor\";\n    ECCategory[\"TRANSISTOR\"] = \"Transistor\";\n  })(ECCategory || (ECCategory = {}));\n\n  return ECCategory;\n})();\nexport let DatabaseService = /*#__PURE__*/(() => {\n  class DatabaseService {\n    constructor(database, authService) {\n      this.database = database;\n      this.authService = authService;\n      console.log('database');\n    }\n\n    getComponents() {\n      const listVal = this.authService.userData.pipe(filter(user => user != null), map(user => {\n        return ref(this.database, user.uid + '/components');\n      }), mergeMap(doc => {\n        return objectVal(doc);\n      }), map(obj => {\n        return Object.entries(obj).map(([_, value]) => value);\n      })); // const doc = ref(this.database, 'components');\n      // const listVal = objectVal(doc).pipe(\n      //   map((obj) => {\n      //     return (<any>Object).entries(obj).map(([_, value]) => value);\n      //   })\n      // );\n\n      return listVal;\n    }\n\n    saveComponent(component) {\n      set(ref(this.database, 'components/' + component.id), component);\n    }\n\n    saveComponents(components) {\n      components.forEach(component => {\n        set(ref(this.database, 'components/' + component.id), component);\n      });\n    }\n\n    deleteComponent(id) {\n      remove(ref(this.database, 'components/' + id)); // set(ref(this.database, 'components/' + id), null);\n    }\n\n  }\n\n  DatabaseService.ɵfac = function DatabaseService_Factory(t) {\n    return new (t || DatabaseService)(i0.ɵɵinject(i1.Database), i0.ɵɵinject(i2.AuthenticationService));\n  };\n\n  DatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DatabaseService,\n    factory: DatabaseService.ɵfac\n  });\n  return DatabaseService;\n})();","map":null,"metadata":{},"sourceType":"module"}